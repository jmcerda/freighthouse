<?php


/**
 * @file
 * Module file for "Twitter Follow".
 */

function twitter_follow_init() {
  drupal_add_css(drupal_get_path('module', 'twitter_follow') . '/followblock.css');
  drupal_add_js('!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");', 'inline');
}

/**
 * Implementation of hook_libraries_info
 * @return [type] [description]
 */
function twitter_follow_libraries_info() {
  $libraries['twitter_api_php'] = array(
    'name' => 'Twitter API php',
    'vendor url' => 'https://github.com/J7mbo/twitter-api-php',
    'version arguments' => array(
      'file' => 'README.md',
      'pattern' => '/API v(\d+)/',
      'lines' => 10,
      'cols' => 200,
    ),
    'download url' => 'https://github.com/J7mbo/twitter-api-php/archive/master.zip',
    'files' => array(
      'php' => array(
        'TwitterAPIExchange.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_block_info().
 *
 * Provides one block named 'Twitter Follow Block' that is globally cached.
 */
function twitter_follow_block_info() {
  $blocks['twitter-follow-block'] = array(
    'info' => t('Twitter Follow Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Renders a HTML-span containing the Twitter Follow Block.
 */
function twitter_follow_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'twitter-follow-block':
      $block['content'] = twitter_follow_block_body();
      break;
  }
  return $block;
}


/**
 * Implements hook_block_configure().
 */
function twitter_follow_block_configure($delta = '') {
  $form = array();
  if ($delta == 'twitter-follow-block') {

    $form['twitter_follow_oauth_access_token'] = array(
      '#type' => 'textfield',
      '#title' => t('OAUTH Access token'),
      '#size' => 30,
      '#description' => t('Enter the OAUTH Access token'),
      '#default_value' => variable_get('twitter_follow_oauth_access_token', ''),
    );

    $form['twitter_follow_oauth_access_token_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('OAUTH Access token secret'),
      '#size' => 30,
      '#description' => t('Enter the OAUTH Access token secret'),
      '#default_value' => variable_get('twitter_follow_oauth_access_token_secret', ''),
    );

    $form['twitter_follow_consumer_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Consumer key'),
      '#size' => 30,
      '#description' => t('Enter the Consumer key'),
      '#default_value' => variable_get('twitter_follow_consumer_key', ''),
    );

    $form['twitter_follow_consumer_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('Consumer secret'),
      '#size' => 30,
      '#description' => t('Enter the Consumer secret'),
      '#default_value' => variable_get('twitter_follow_consumer_secret', ''),
    );

    $form['twitter_follow_username'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter username'),
      '#size' => 30,
      '#description' => t('Enter the username Twitter'),
      '#default_value' => variable_get('twitter_follow_username', ''),
    );

    $form['twitter_follow_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#size' => 10,
      '#description' => t('Enter the Width of Twitter Follow Block (in pixel)'),
      '#default_value' => variable_get('twitter_follow_width', '300px'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * Stores the Twitter Follow block size and settings
 */
function twitter_follow_block_save($delta = '', $edit = array()) {
  if ($delta == 'twitter-follow-block') {
    variable_set('twitter_follow_oauth_access_token', $edit['twitter_follow_oauth_access_token']);
    variable_set('twitter_follow_oauth_access_token_secret', $edit['twitter_follow_oauth_access_token_secret']);
    variable_set('twitter_follow_consumer_key', $edit['twitter_follow_consumer_key']);
    variable_set('twitter_follow_consumer_secret', $edit['twitter_follow_consumer_secret']);
    variable_set('twitter_follow_username', $edit['twitter_follow_username']);
    variable_set('twitter_follow_width', $edit['twitter_follow_width']);
  }
}

function twitter_follow_block_body() {
  $followers = $avatars = $ids = array();

  $settings = array(
    'oauth_access_token' => variable_get('twitter_follow_oauth_access_token', ''),
    'oauth_access_token_secret' => variable_get('twitter_follow_oauth_access_token_secret', ''),
    'consumer_key' => variable_get('twitter_follow_consumer_key', ''),
    'consumer_secret' => variable_get('twitter_follow_consumer_secret', ''),
    'username' => variable_get('twitter_follow_username', ''),
    'width' => variable_get('twitter_follow_width', ''),
  );

  $userdata = _twitter_follow_get_user_data($settings, $settings['username'], 'screen_name');

  $total_followers = $userdata['followers_count'];

  $followers = _twitter_follow_get_followers($settings, 10);

  $ids = $followers['ids'];

  foreach ($ids as $id) {
    $follower = _twitter_follow_get_user_data($settings, $id);
    $avatars[] = theme('image', array('path' => $follower['profile_image_url']));
  }
  $output  = '<div class="follow-box" style="width:' . $settings['width'] . ';">';

  $output .= '<div class="header"><div class="header-left">' . theme('image', array('path' => $userdata['profile_image_url'])) . '</div>';

  $output .= '<div class="header-right"><div class="header-right-top">' . l($userdata['name'], 'http:///www.twitter.com/' . $settings['username'], array('absolute' => TRUE)) . ' ' . l( '@' . $userdata['screen_name'], 'http:///www.twitter.com/' . $settings['username'], array('absolute' => TRUE)) . '</div><div class="header-right-bottom">' . '<a href="https://twitter.com/' . $settings['username'] . '" class="twitter-follow-button" data-show-count="false" data-show-screen-name="false">Follow ' . $settings['username'] . '</a>' . '</div></div></div>';

  $output .= '<div class="content-top">' . $total_followers . ' follow ' . l($userdata['name'], 'http:///www.twitter.com/' . $settings['username'], array('absolute' => TRUE)) . '.</div>';

  $output .= '<div class="content">' . theme('item_list', array('items' => $avatars)) . '</div>';

  $output .= '<div class="content-bottom">' . t('Twitter social plugin') . '</div>';

  $output .= '</div>';

  return $output;
}

function _twitter_follow_get_followers($settings, $count) {
  if (libraries_detect('twitter_api_php')) {
    libraries_load('twitter_api_php');
    $url = 'https://api.twitter.com/1.1/followers/ids.json';
    $getfield = '?screen_name=' . $settings['username'] . '&count=' . $count;
    $requestMethod = 'GET';
    $twitter = new TwitterAPIExchange($settings);

    $followers = drupal_json_decode($twitter->setGetfield($getfield)
               ->buildOauth($url, $requestMethod)
               ->performRequest());

    return $followers;
  }
  else {
    return drupal_set_message(t('Please, install twitter-api-php library from https://github.com/J7mbo/twitter-api-php'), 'status', FALSE);
  }
}

function _twitter_follow_get_user_data($settings, $follower_id, $key = 'id') {
  if (libraries_detect('twitter_api_php')) {
    libraries_load('twitter_api_php');
    $url = 'https://api.twitter.com/1.1/users/show.json';

    switch ($key) {
      case 'id':
        $getfield = '?user_id=' . $follower_id;
        break;
      case 'screen_name':
        $getfield = '?screen_name=' . $follower_id;
        break;
      default:
        $getfield = '?user_id=' . $follower_id;
        break;
    }

    $requestMethod = 'GET';
    $twitter = new TwitterAPIExchange($settings);

    $follower = drupal_json_decode($twitter->setGetfield($getfield)
             ->buildOauth($url, $requestMethod)
             ->performRequest());
    return $follower;
  }
  else {
    return drupal_set_message(t('Please, install twitter-api-php library from https://github.com/J7mbo/twitter-api-php'), 'status', FALSE);
  }
}


