<?php
// $Id$


/**
 * @file
 * Display checklist to users.
 */
define('CHECKLIST_ENABLED', 1);
define('CHECKLIST_DISABLED', 2);
define('CHECKLIST_DELETED', 0);
define('CHECKLIST_DEFAULT_TYPE', 'user');
define('CHECKLIST_ADMIN_PATH', 'admin/structure/checklist');


/**
 * Implements hook_permission().
 */
function checklist_permission() {
  return array(
    'manage checklist' => array(
      'title' => t('Manage checklists'),
      'description' => t('Manage other checklists by adding and removing items from them.'),
    ),
    'manage user checklists' => array(
      'title' => t('Manage user checklists'),
      'description' => t('Manage the checklists of users on your site and mark off what they have an haven\'t completed.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function checklist_init() {
  global $user;

  // User isn't logged in, do nothing.
  if (!$user->uid) {
    return;
  }
  $lists = _checklist_get_user_lists($user, TRUE);

  // User has no lists left.
  if (empty($lists)) {
    return;
  }
  $actual_path = $_GET['q'];
  $alias_path = drupal_get_path_alias($actual_path);
  $normal_path = drupal_get_path_alias($actual_path);
  $found = FALSE;
  $return = _checklists_determine_allowed_paths($lists, $user, array($actual_path, $alias_path, $normal_path), $found);

  // An exception path.
  if ($return === TRUE) {
    return;
  }

  // Neither the actual path or alias were found.
  if (!$found) {
    if (!empty($_SESSION['checklist_required']) && !user_access('manage checklist')) {
      // Redirect to the main checklist page if the path is not allowed.
      drupal_goto('checklist');
    }
    // This path has nothing to do with the checklists.
    return;
  }
  list($instance_id, $cliid) = $return;
  // Pull out the checklist item.
  $item = $lists[$instance_id]->items[$cliid];

  $complete = _checklist_item_callback_handler('process_item', $lists[$instance_id], $item, $user);

  if ($complete) {
    _checklist_complete_user_item($instance_id, $item, $user, TRUE);
  }

  /*if ($redirect && (isset($_SESSION['checklist_required'])) && (!empty($_SESSION['checklist_required'])) && ($_GET['q'] != 'logout')) {
   if ($redirect) {
   $_SESSION['checklist_final_destination'] = $_GET['q'];
   unset($_GET['q']);
   $_SESSION['checklist_final_destination'] = url($_SESSION['checklist_final_destination'], array('query' => $_GET));
   drupal_goto('checklist');
   }
   }*/

}

/**
 * Implements hook_menu()
 */
function checklist_menu() {
  $items = array();

  $items[CHECKLIST_ADMIN_PATH] = array(
    'title' => 'Checklist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_admin_checklists_form'),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items[CHECKLIST_ADMIN_PATH . '/list'] = array(
    'title' => 'Checklists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_admin_checklists_form'),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );
  $items[CHECKLIST_ADMIN_PATH . '/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_admin_form'),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/add'] = array(
    'title' => 'Add checklist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_edit_form'),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist'] = array(
    'title' => 'Edit checklist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_edit_form', 3),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist/delete'] = array(
    'title' => 'Delete checklist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_delete_form', 3),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist/items'] = array(
    'title' => 'Add checklist item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_edit_item_form', 3),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist/items/%checklist_item'] = array(
    'title' => 'Edit checklist item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_edit_item_form', 3, 5),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist/items/%checklist_item/delete'] = array(
    'title' => 'Delete checklist item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_delete_item_form', 3, 5),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist/instances'] = array(
    'title' => 'Checklist instances',
    'page callback' => 'checklist_instances_list',
    'page arguments' => array(3),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist/instances/add'] = array(
    'title' => 'Add instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_edit_instance_form', 3),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist/instances/%checklist_instance'] = array(
    'title' => 'Edit instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_edit_instance_form', 3, 5),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[CHECKLIST_ADMIN_PATH . '/%checklist_checklist/instances/%checklist_instance/delete'] = array(
    'title' => 'Delete instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checklist_delete_instance_form', 3, 5),
    'access arguments' => array('manage checklist'),
    'file' => 'includes/checklist.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['checklist'] = array(
    'title' => 'Checklist',
    'page callback' => 'checklist_main_page',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'includes/checklist.pages.inc',
  );
  $items['checklist/check/%checklist_instance/%checklist_item'] = array(
    'title' => 'Checklist',
    'page callback' => 'checklist_user_check_page',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'file' => 'includes/checklist.pages.inc',
  );
  $items['checklist/admin/check/%user/%checklist_instance/%checklist_item'] = array(
    'title' => 'Checklist',
    'page callback' => 'checklist_admin_check_page',
    'access arguments' => array('manage user checklists'),
    'page arguments' => array(3, 4, 5),
    'type' => MENU_CALLBACK,
    'file' => 'includes/checklist.pages.inc',
  );
  $items['autocomplete/checklist/node_agree'] = array(
    'title' => 'Checklist Autocomplete',
    'page callback' => 'checklist_item_autocomplete_node',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/checklist.handlers.inc',
  );

  $items['user/%user/checklist'] = array(
    'title' => 'Checklists',
    'page callback' => 'checklist_user_page',
    'page arguments' => array(1),
    'access callback' => 'checklist_user_access',
    'access arguments' => array(1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/checklist.pages.inc',
  );
  return $items;
}

/**
 * Checklist user access check to see if
 * a user can view another user's checklists.
 */
function checklist_user_access($account) {
  global $user;
  // The user is viewing their own checklists.
  if ($account->uid == $user->uid) {
    return TRUE;
  }
  // The logged in user can manage other checklists.
  if (user_access('manage user checklists')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_user_login().
 * Redirect on login, when necessary.
 */
function checklist_user_login(&$edit, $account) {
  $query = 'SELECT 1 FROM {checklist_groups} clg INNER JOIN {checklist_instances} clin ON clin.instance_id=clg.instance_id INNER JOIN {checklist_lists} cll ON clin.clid=cll.clid LEFT JOIN {checklist_complete} clc ON clc.instance_id=clin.instance_id AND (clc.uid = :uid OR clin.group_complete = 1) WHERE clc.completed IS NULL AND cll.status = :enabled AND clin.status = :enabled AND clg.group_id IN (:group_ids)';
  $args = array(':uid' => $account->uid, ':enabled' => CHECKLIST_ENABLED, ':group_ids' => array_keys(usergroups_api_get_all_user_group_options($account)));
  if (isset($_GET['skcl'])
      || !variable_get('checklist_show_on_login', TRUE)
      || ((isset($_GET['destination'])) && (strpos($_GET['destination'], 'skcl=1') !== FALSE))) {
    // 'skcl' means to skip the checklist page. However, need to check if there is a restricting checklist
    // because that will limit the navigation.
    $query .= ' AND cll.restrict_nav = 1';
  }
  if (db_query_range($query, 0, 1, $args)->fetchField()) {
    // Store the destination where the user was headed. The 'checklist' page
    // will use this to redirect the user once the user has completed their
    // checklists.
    $_SESSION['checklist_final_destination'] = (isset($_GET['destination']) ? $_GET['destination'] : '');
    // #1466278 - Redirect on any login except for password reset.
    if (empty($_POST) || empty($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
      // Change the destination to the 'checklist' page.
      $_GET['destination'] = 'checklist';
    }
  }
}
/**
 * Implements hook_node_view().
 */
function checklist_node_view($node, $view_mode = 'full') {
  module_load_include('inc', 'checklist', 'includes/checklist.handlers');
  list($instance, $item) = checklist_checklist_item_node_agree_process_item(NULL, $node->nid);
  if ($instance && $item) {
    $node->content['agree_to'] = array(
      '#markup' => drupal_render(drupal_get_form('checklist_node_agree_form', $instance, $item)),
      '#weight' => 101,
    );
  }
}

/**
 * Implements hook_node_insert().
 * Record user interaction.
 */
function checklist_node_insert($node) {
  module_load_include('inc', 'checklist', 'includes/checklist.handlers');
  list($instance, $item) = checklist_checklist_item_node_process_item(NULL, $node->type);
  // Make sure the item exists and that the node is published if required to be.
  if ($instance && $item && (empty($item->data['node-published']) || !empty($node->status))) {
    _checklist_complete_user_item($instance->instance_id, $item);
  }
}

/**
 * Implements hook_node_update().
 * Record user interaction.
 */
function checklist_node_update($node) {
  module_load_include('inc', 'checklist', 'includes/checklist.handlers');
  list($instance, $item) = checklist_checklist_item_node_process_item(NULL, $node->type);
  // Make sure the item exists and that the node is published if required to be.
  if ($instance && $item && (empty($item->data['node-published']) || !empty($node->status))) {
    _checklist_complete_user_item($instance->instance_id, $item);
  }
}

/**
 * Implements hook_entity_insert().
 * Record user interaction.
 */
function checklist_entity_insert($entity, $type) {
  module_load_include('inc', 'checklist', 'includes/checklist.handlers');
  // Pull out the bundle type if there is one.
  $data = entity_get_info($type);
  if (!empty($data['entity keys']['bundle'])) {
    $more = $entity->{$data['entity keys']['bundle']};
  }
  else {
    $more = $type;
  }
  list($instance, $item) = checklist_checklist_item_entity_process_item(NULL, $type . '||' . $more);
  // Make sure the item exists.
  if ($instance && $item) {
    _checklist_complete_user_item($instance->instance_id, $item);
  }
}

/**
 * Implements hook_theme().
 */
function checklist_theme() {
  $themes = array(
    'checklist_lists' => array(
      'variables' => array(
        'lists' => NULL,
        'account' => NULL,
      ),
      'file' => 'includes/checklist.pages.inc',
    ),
    'checklist_list' => array(
      'variables' => array(
        'lists' => NULL,
        'account' => NULL,
      ),
      'file' => 'includes/checklist.pages.inc',
    ),
    'checklist_item' => array(
      'variables' => array(
        'item' => NULL,
        'account' => NULL,
        'list' => NULL,
        'link' => NULL,
      ),
      'file' => 'includes/checklist.pages.inc',
    ),
    'checklist_edit_form' => array(
      'render element' => 'form',
      'file' => 'includes/checklist.admin.inc',
    ),
    'checklist_admin_checklists_form' => array(
      'render element' => 'form',
      'file' => 'includes/checklist.admin.inc',
    ),
  );
  return $themes;
}

/**
 * Implements hook_views_api().
 */
function checklist_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'checklist') . '/includes',
  );
}

/**
 * Implements hook_token_info().
 */
function checklist_token_info() {
  $type = array(
    'name' => t('Checklist'),
    'description' => t('Tokens related to a checklist instance.'),
    'needs-data' => 'checklist_instance',
  );
  $type_item = array(
    'name' => t('Checklist Item'),
    'description' => t('Tokens related to a checklist item.'),
    'needs-data' => 'checklist_item',
  );

  $instance['instance_id'] = array(
    'name' => t("Instance ID"),
    'description' => t("The unique ID of the instance."),
  );
  $instance['clid'] = array(
    'name' => t("Checklist ID"),
    'description' => t("The checklist id."),
  );
  $instance['title'] = array(
    'name' => t("Instance title"),
    'description' => t("The title of the checklist instance."),
  );

  $item['cliid'] = array(
    'name' => t("Item ID"),
    'description' => t("The unique ID of the item."),
  );
  $item['clid'] = array(
    'name' => t("Checklist ID"),
    'description' => t("The checklist id."),
  );
  $item['title'] = array(
    'name' => t("Item title"),
    'description' => t("The title of the checklist item."),
  );
  $item['description'] = array(
    'name' => t("Item description"),
    'description' => t("The description of the checklist item."),
  );

  return array(
    'types' => array('checklist_instance' => $type, 'checklist_item' => $type_item),
    'tokens' => array('checklist_instance' => $instance, 'checklist_item' => $item),
  );
}

/**
 * Implements hook_tokens().
 */
function checklist_tokens($type, $tokens, $data = array(), $options = array()) {
  if (isset($options['language'])) {
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'checklist_instance' && !empty($data['checklist_instance'])) {
    $instance = $data['checklist_instance'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'instance_id':
        case 'clid':
          $replacements[$original] = $instance->{$name};
          break;

        case 'title':
          $replacements[$original] = $sanitize ? check_plain($instance->title) : $instance->title;
          break;
      }
    }
  }

  if ($type == 'checklist_item' && !empty($data['checklist_item'])) {
    $item = $data['checklist_item'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'cliid':
        case 'clid':
          $replacements[$original] = $item->{$name};
          break;

        case 'title':
          $replacements[$original] = $sanitize ? check_plain($item->title) : $item->title;
          break;

        case 'description':
          $replacements[$original] = $sanitize ? check_markup($item->description, $item->format, $language_code) : $item->description;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Form to display Continue button.
 */
function checklist_continue_link() {
  return l(variable_get('checklist_continue_text', 'Continue'), check_url(variable_get('checklist_continue_path', '')));
}

/**
 * Load a checklist.
 */
function checklist_checklist_load($clid, $items = FALSE) {
  $clid = is_numeric($clid) ? (int)$clid : 0;
  $list = db_query('SELECT * FROM {checklist_lists} WHERE clid = :clid', array(':clid' => $clid))->fetchObject();
  if (!$list) {
    return FALSE;
  }
  if ($items) {
    $list->items = checklist_items_load($clid);
  }
  return $list;
}

/**
 * Load a checklist instance.
 */
function checklist_instance_load($instance_id, $groups = FALSE, $items = FALSE) {
  $instance_id = is_numeric($instance_id) ? (int)$instance_id : 0;
  $list = db_query('SELECT * FROM {checklist_lists} cl JOIN {checklist_instances} clin ON cl.clid=clin.clid WHERE instance_id = :instance_id', array(':instance_id' => $instance_id))->fetchObject();
  if (!$list) {
    return FALSE;
  }
  if ($groups) {
    $list->groups = checklist_instance_group_load($list->instance_id);
  }
  if ($items) {
    $list->items = checklist_items_load($clid);
  }
  return $list;
}

/**
 * Load the groups for an instance.
 */
function checklist_instance_group_load($instance_id) {
  return db_query('SELECT group_id FROM {checklist_groups} WHERE instance_id = :instance_id', array(':instance_id' => $instance_id))->fetchCol();
}

/**
 * Load up all the checklists.
 */
function checklist_checklists_load($pending = FALSE) {
  $query = 'SELECT * FROM {checklist_lists} WHERE ';
  $args = array();
  if ($pending) {
    $query .= ' status IN (:statuses)';
    $args[':statuses'] = array(CHECKLIST_ENABLED, CHECKLIST_DISABLED);
  }
  else {
    $query .= ' status = :statuses';
    $args[':statuses'] = CHECKLIST_ENABLED;
  }
  $cls = array();
  return db_query($query . ' ORDER by weight, title', $args)->fetchAllAssoc('clid');
}

/**
 * Load up all the checklists.
 */
function checklist_instances_load($clid, $all = FALSE) {
  $query = 'SELECT * FROM {checklist_lists} cl JOIN {checklist_instances} clin ON cl.clid=clin.clid WHERE cl.clid=:clid';
  $args = array(':clid' => $clid);
  if ($all) {
    $query .= ' AND clin.status IN (:statuses)';
    $args[':statuses'] = array(CHECKLIST_ENABLED, CHECKLIST_DISABLED);
  }
  else {
    $query .= ' AND clin.status = :statuses';
    $args[':statuses'] = CHECKLIST_ENABLED;
  }
  return db_query($query, $args)->fetchAllAssoc('instance_id');
}

/**
 * Load up the checklist items.
 */
function checklist_items_load($clid, $pending = FALSE) {
  $query = 'SELECT * FROM {checklist_items} WHERE clid=:clid';
  $args = array(':clid' => $clid);
  if ($pending) {
    $query .= ' AND status IN (:statuses)';
    $args[':statuses'] = array(CHECKLIST_ENABLED, CHECKLIST_DISABLED);
  }
  else {
    $query .= ' AND status = :statuses';
    $args[':statuses'] = CHECKLIST_ENABLED;
  }
  $items = array();
  return db_query($query . ' ORDER by weight, title', $args)->fetchAllAssoc('cliid');
}

/**
 * Load a checklist item
 */
function checklist_item_load($cliid) {
  $cliid = is_numeric($cliid) ? (int)$cliid : 0;
  if ($item = db_query('SELECT * FROM {checklist_items} WHERE cliid = :cliid', array(':cliid' => $cliid))->fetchObject()) {
    $item->data = unserialize($item->data);
  }
  return $item;
}

/**
 * Implements hook_checklist_item_type().
 */
function checklist_checklist_item_type() {
  return array(
    array(
      'type' => 'user',
      'title' => t('User check'),
      'description' => t('A checkbox must be checked by the user.'),
      'file' => 'includes/checklist.handlers.inc',
    ),
    array(
      'type' => 'admin',
      'title' => t('Administrator check'),
      'description' => t('A checkbox must be checked by a user with the "manage user checklists" permission.'),
      'file' => 'includes/checklist.handlers.inc',
    ),
    array(
      'type' => 'node',
      'title' => t('Node creation'),
      'description' => t('A user must create a node of a certain type.'),
      'file' => 'includes/checklist.handlers.inc',
    ),
    array(
      'type' => 'page_view',
      'title' => t('Page view'),
      'description' => t('A user must view a specific drupal page.'),
      'file' => 'includes/checklist.handlers.inc',
    ),
    array(
      'type' => 'node_agree',
      'title' => t('Agree to node'),
      'description' => t('A user must agree to the content of a specific node.'),
      'file' => 'includes/checklist.handlers.inc',
    ),
    array(
      'type' => 'entity',
      'title' => t('Entity creation'),
      'description' => t('A user must create an entity of a certain type.'),
      'file' => 'includes/checklist.handlers.inc',
      'urls_view_on_edit' => TRUE,
    ),
  );
}


/**
 * Load all of the item type handlers.
 */
function checklist_item_type_handlers($type = NULL) {
  static $types;
  if (!isset($types)) {
    $types = array();
    foreach (module_implements('checklist_item_type') as $module) {
      $return = module_invoke($module, 'checklist_item_type');
      foreach ($return as $handler) {
        if (!isset($handler['type'])) {
          continue;
        }
        $handler['module'] = $module;
        if (!isset($handler['title'])) {
          $handler['title'] = ucfirst($handler['type']);
        }
        $types[$handler['type']] = $handler;
      }
    }
  }

  if ($type) {
    return isset($types[$type]) ? $types[$type] : NULL;
  }

  return $types;
}

/**
 * Get the display title for the item type given.
 */
function _checklist_item_type_title($type) {
  $handler = checklist_item_type_handlers($type);
  if (!$handler) {
    return t('Unknown/Broken');
  }
  return $handler['title'];
}

/**
 * Get the display title for the item type given.
 */
function _checklist_item_type_description($type) {
  $handler = checklist_item_type_handlers($type);
  if (!$handler) {
    return '';
  }
  return $handler['description'];
}

/**
 * Load up the include file to make sure item handler functions are loaded.
 */
function _checklist_item_load_include_file($handler) {
  if (isset($handler['file'])) {
    $file = drupal_get_path('module', $handler['module']) . '/' . $handler['file'];
    if (file_exists($file)) {
      require_once DRUPAL_ROOT . '/' . $file;
    }
  }
}

/**
 * Determine which paths are allowed to be visited for the lists given.
 */
function _checklists_determine_allowed_paths(&$lists, $account, $return_on_paths, &$found) {
  $found = FALSE;
  $allowed_paths = array(
    'logout', 'user/logout', // Always let the user logout.
    'checklist', // Let the user get to the main checklist page.
    'user/' . $account->uid . '/checklist',
  );

  // The path is one of the allowed paths.
  if (array_intersect($return_on_paths, $allowed_paths)) {
    $found = TRUE;
    return TRUE;
  }
  // #1466278 - Allow the user edit page to handle one time login links.
  elseif (!empty($_SESSION['pass_reset_' . $account->uid]) && in_array('user/' . $account->uid . '/edit', $return_on_paths)) {
    $found = TRUE;
    return TRUE;
  }

  // Go through all of the items and find the allowed paths.
  $item_paths = array();
  foreach ($lists as &$list) {
    foreach ($list->items as &$item) {
      // As long as the item isn't checked, then they can still go there.
      if (empty($item->checked_on) || $item->allow_uncheck) {
        // Uncheck handling is provided by the default type.
        if (!empty($item->checked_on)) {
          $item->cltid = CHECKLIST_DEFAULT_TYPE;
        }
        if (!($paths = _checklist_item_callback_handler('allowed_paths', $list, $item, $account))) {
          $paths = array();
        }

        // Add additional allowed urls.
        if ($item->data && isset($item->data['_checklist_internal_allowed_urls'])) {
          $paths = array_merge($paths, $item->data['_checklist_internal_allowed_urls']);
        }

        // Store which path belongs to which item.
        foreach ($paths as $path) {
          $item_paths[$path] = array($item->clid, $item->cliid);
          // Check if this is one of the paths to return on.
          if (in_array($path, $return_on_paths)) {
            $found = TRUE;
            return array($list->instance_id, $item->cliid);
          }
        }

        // Force order means that the user can only visit the first
        // incomplete item in this list.
        if (empty($item->checked_on) && !empty($list->force_order)) {
          break;
        }
      }
    }
  }
  return $item_paths;
}

/**
 * Helper function to call the item form handler
 */
function _checklist_item_callback_handler($action, $instance, $item, $account) {
  // This should always be true, but just to be sure.
  if (($handler = checklist_item_type_handlers($item->cltid)) || ($handler = checklist_item_type_handlers(CHECKLIST_DEFAULT_TYPE))) {
    // Create function name and call it if it exists.
    $function = $handler['module'] . '_checklist_item_' . $handler['type'] . '_' . $action;
    _checklist_item_load_include_file($handler);
    if (function_exists($function)) {
      $return = $function($instance, $item, $account);
      return $return;
    }
  }
  return FALSE;
}

/**
 * Internal function to flag a single item as complete
 */
function _checklist_complete_user_item($instance_id, $item, $account = NULL, $check_list_complete = TRUE, $display_message = TRUE) {
  global $user;
  if (!$account) {
    $account = $user;
  }
  $complete = array(
    'cliid' => $item->cliid,
    'instance_id' => $instance_id,
    'uid' => $account->uid,
    'checked_on' => REQUEST_TIME,
    'checked_by' => $user->uid,
  );
  drupal_write_record('checklist_user_checks', $complete);
  module_invoke_all('checklist_complete', 'item', $account, $item);
  if (module_exists('rules')) {
    rules_invoke_event('checklist_item_complete', checklist_instance_load($instance_id), $item, $account);
  }
  if ($check_list_complete) {
    if (!db_query_range('SELECT 1 FROM {checklist_items} cli JOIN {checklist_instances} clin ON cli.clid=clin.clid LEFT JOIN {checklist_user_checks} clud ON cli.cliid = clud.cliid AND clud.instance_id=clin.instance_id AND (clud.uid = :uid OR clin.group_complete = 1) WHERE clin.instance_id = :instance_id AND clud.uid IS NULL AND cli.status = :cli_status', 0, 1, array(':uid' => $account->uid, ':instance_id' => $instance_id, ':cli_status' => CHECKLIST_ENABLED))->fetchField()) {
      _checklist_complete_user_list($instance_id, $account);
    }
    elseif ($display_message) {
      if (($account->uid == $user->uid)) {
        drupal_set_message(t('You have checked an item off !link.', array('!link' => l(t('your checklist'), 'user/' . $account->uid . '/checklist'))));
      }
    }
  }
}

/**
 * Internal function to flag a checklist as complete
 */
function _checklist_complete_user_list($instance_id, $account = NULL) {
  global $user;
  if (!$account) {
    $account = $user;
  }
  $list = checklist_instance_load($instance_id);
  if (($list->rid_on_complete) && (!isset($account->roles[$list->rid_on_complete]))) {
    $to_change = array();
    $to_change['roles'] = $account->roles + array($list->rid_on_complete => $list->rid_on_complete);
    user_save($account, $to_change);
  }
  $complete = array(
    'instance_id' => $instance_id,
    'uid' => $account->uid,
    'completed' => REQUEST_TIME,
  );
  drupal_write_record('checklist_complete', $complete);
  if ($account->uid == $user->uid) {
    if (isset($_SESSION['checklist_required'][$instance_id])) {
      unset($_SESSION['checklist_required'][$instance_id]);
    }
    if ($list->message) {
      drupal_set_message(_checklist_clean($list->message));
    }
  }
  module_invoke_all('checklist_complete', 'checklist', $account, $list);
  if (module_exists('rules')) {
    rules_invoke_event('checklist_complete', $list, $account);
  }
}

/**
 * Internal function to build a list of a user's checklist
 */
function _checklist_get_user_lists($account, $skip_completed_lists = TRUE) {
  global $user;
  if ($account->uid == $user->uid) {
    $_SESSION['checklist_required'] = array();
  }
  // This is a prerequisite, but anyone upgrading may not have it enabled.
  if (!module_exists('usergroups_api')) return array();

  $lists = array();
  $query = 'SELECT cll.*, clin.*, clc.completed '
    .'FROM {checklist_groups} clg '
    .'INNER JOIN {checklist_instances} clin ON clg.instance_id = clin.instance_id '
    .'INNER JOIN {checklist_lists} cll ON cll.clid = clin.clid '
    .'LEFT JOIN {checklist_complete} clc ON clc.instance_id=clin.instance_id AND (clc.uid = :uid OR clin.group_complete = 1) '
    .'WHERE cll.first_uid < :uid '
    .'AND ((cll.status = :status AND clin.status = :status) '
    . ($skip_completed_lists ? ' AND clc.completed IS NULL ' : ' OR clc.completed IS NOT NULL ')
    .') AND clg.group_id IN (:group_ids)'
    .' ORDER BY clc.completed, cll.weight, cll.title';
  $args = array(':uid' => $account->uid, ':status' => CHECKLIST_ENABLED, ':group_ids' => array_keys(usergroups_api_get_all_user_group_options($account)));
  $rs_lists = db_query($query, $args);
  foreach ($rs_lists as $list) {
    // Since a user may have multiple groups that qualify, only process an instance once.
    if (isset($lists[$list->instance_id])) {
      continue;
    }
    $list->items = array();
    $rs_items = db_query(
      'SELECT cli.*, cluc.checked_on, cluc.checked_by '
      .'FROM {checklist_items} cli '
      .'LEFT JOIN {checklist_user_checks} cluc ON cli.cliid = cluc.cliid AND cluc.instance_id = :instance_id AND (cluc.uid = :uid'
        . ($list->group_complete ? ' OR 1' : '') .') '
      .'WHERE cli.clid = :clid AND (cli.status = :status OR cluc.checked_on IS NOT NULL) '
      .'ORDER BY cli.weight, cli.title',
      array(':instance_id' => $list->instance_id, ':uid' => $account->uid, ':clid' => $list->clid, ':status' => CHECKLIST_ENABLED));
    foreach ($rs_items as $item) {
      $item->data = unserialize($item->data);
      $list->items[$item->cliid] = $item;
      // This list isn't complete if one item is not checked.
      if (!$item->checked_on) {
        $list->completed = FALSE;
      }
    }

    // The completed value is NULL but never set to FALSE. This means the list should actually be completed.
    if ($list->completed === NULL) {
      $list->completed = REQUEST_TIME;
      _checklist_complete_user_list($list->instance_id, $account);
    }
    if (!($list->completed) || !($skip_completed_lists)) {
      if (($account->uid == $user->uid) && ($list->restrict_nav) && !($list->completed)) {
        $_SESSION['checklist_required'][$list->instance_id] = 1;
      }
      $lists[$list->instance_id] = $list;
    }
  }
  return $lists;
}

/**
 * Internal function to wrap outputting text in check_plain or check_markup, and token_replace, if the Token module is installed
 */
function _checklist_clean($output, $format = NULL) {
  if (module_exists('token')) {
    $output = token_replace($output, array('global'));
  }
  if ($format) {
    return check_markup($output, $format);
  }
  return check_plain($output);
}

/**
 * Internal function to create a form help fieldset listing available tokens, if the Token module is installed
 */
function _checklist_token_help($weight = NULL, $token_types = array()) {
  if (!module_exists('token')) {
    return NULL;
  }
  return array(
    '#title' => t('Available tokens'),
    '#type' => 'fieldset',
    '#weight' => $weight,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    'help_details' => array(
      '#type' => 'item',
      '#markup' => theme('token_tree', array('token_types' => $token_types)),
    ),
  );
}

/**
 * Internal function to create a checkbox form item
 */
function _checklist_checkbox_form_item($title, $default = FALSE, $weight = NULL, $description = '', $set_bold = FALSE) {
  $item = array(
    '#type' => 'checkbox',
    '#title' => $title,
    '#description' => $description,
    '#weight' => $weight,
    '#default_value' => $default ? TRUE : FALSE,
  );

  if ($set_bold) {
    $item['#title'] = '<b>' . $item['#title'] . '</b>';
  }
  return $item;
}

/**
 * Internal function to process a url, and redirect user
 */
function _checklist_goto($path) {
  $path = explode('?', $path);
  $path += array(
    0 => '',
    1 => '',
  );
  // TODO $path[1] needs to be an array of keys and values instead of a string.
  drupal_goto($path[0], array('query' => $path[1]));
}
