<?php

/**
 * @file
 * The SoundCloud integration module.
 */


define('SOUNDCLOUD_ADMIN_URL', 'admin/config/services/soundcloud');

/**
 * Implements hook_permission().
 */
function soundcloud_sync_permission() {
  return array(
    'administer soundcloud' => array(
      'title' => t('Administer SoundCloud Sync'),
      'description' => t('Perform administrative actions with SoundCloud service.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function soundcloud_sync_menu() {
  $items = array();

  $items[SOUNDCLOUD_ADMIN_URL] = array(
    'title' => 'SoundCloud Sync Settings',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'SoundCloud Serivce Settings.',
    'access arguments' => array('administer soundcloud'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('soundcloud_sync_admin_connection_settings_form'),
    'file' => 'soundcloud_sync.admin.inc',
  );
  $items[SOUNDCLOUD_ADMIN_URL . '/connection'] = array(
    'title' => 'Connection',
    'description' => 'SoundCloud Serivce Connection Settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[SOUNDCLOUD_ADMIN_URL . '/client'] = array(
    'title' => 'Client',
    'description' => 'SoundCloud Client.',
    'access arguments' => array('administer soundcloud'),
    'page callback' => 'soundcloud_sync_admin_get_client',
    'file' => 'soundcloud_sync.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Alter any file field to provide ability to sync files with SoundCloud.com
 *
 * @param array $form
 * @param array $form_state
 * @access public
 * @return void
 */
function soundcloud_sync_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] != 'file') {
    return;
  }
  $form['instance']['settings']['soundcloud'] = array(
    '#type' => 'fieldset',
    '#title' => t('SoundCloud Sync settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['instance']['settings']['soundcloud']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable SoundCloud synchronization.'),
    '#default_value' => isset($form['#instance']['settings']['soundcloud']['enable'])
    ? $form['#instance']['settings']['soundcloud']['enable'] : 0,
    '#description' => t('Check to upload file to SoundCloud.com and update it on each node change.'),
  );
  $form['instance']['settings']['soundcloud']['view_mode'] = array(
    '#type' => 'select',
    '#title' => t('Node view mode'),
    '#options' =>  _soundcloud_sync_get_view_modes(),
    '#default_value' => $form['#instance']['settings']['soundcloud']['view_mode'],
    '#description' => t('Select which view mode should be applied to content at souldcloud.com.'),
    '#required' => TRUE,
    '#states' => array(
      'visible' => array(
        'input[id="edit-instance-settings-soundcloud-enable"]' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );
  $default_image = $form['#instance']['settings']['soundcloud']['default_image'];
  $form['instance']['settings']['soundcloud']['default_image'] = array(
    '#type' => 'managed_file',
    '#title' => t('Default Track Image'),
    '#progress_indicator' => 'bar',
    '#description' => t('This image will be used if node has no image for this track.'),
    '#upload_location' => 'public://managed_files/',
    '#default_value' => isset($default_image) ? $default_image : 0,
    '#required' => TRUE,
    '#states' => array(
      'visible' => array(
        'input[id="edit-instance-settings-soundcloud-enable"]' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );
  $form['#submit'][] = 'soundcloud_sync_form_field_ui_field_submit';
}

/**
 * soundcloud_sync_form_field_ui_field_submit
 *
 * @TODO When file replaced or removed old file should be removed from SoundCloud.
 *
 * @param mixed $form
 * @param mixed $form_state
 * @access public
 * @return void
 */
function soundcloud_sync_form_field_ui_field_submit($form, $form_state) {
  global $user;
  $upload = &$form_state['values']['instance']['settings']['soundcloud']['default_image'];
  $file = file_load($upload);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  file_usage_add($file, 'soundcloud_sync', $form['#instance']['field_name'], $user->uid);
  $upload = $file->fid;
}

/**
 * Helper function. Builds list of node's view modes.
 *
 * @return array
 *  Returns array of view modes of 'node' entity.
 *  Key is a view mode's machine name and value is a human-readable label.
 */
function _soundcloud_sync_get_view_modes(){
  $output = array();

  $entity_info = entity_get_info('node');
  foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {
    $output[$view_mode] = $view_mode_info['label'];
  }

  return $output;
}

/**
 * Implements hook_node_update().
 */
function soundcloud_sync_node_update($node) {
  // TODO: Update track only if file or track's meta-information was changed.
  $track = new SoundCloudTrack;

  if ($node->status != $node->original->status) {
    // Node changed status.
    if($node->status == NODE_PUBLISHED) {
      // Node became published.
      $track->insertAll($node);
      return;
    }
    else {
      // Node became unpublished.
      $track->deleteAll($node);
      drupal_set_message(t('Tracks was deleted from SoundCloud.com because node was unpublished. Publish node to upload track again.'));
      return;
    }
  }

  // Node's status wasn't changed and node is published.
  if ($node->status == NODE_PUBLISHED) {
    $params = $track->buildParams($node);
    foreach ($track->fidsList($node) as $fid) {
      // TODO: loop all files and update only changed tracks.
      // To be sure we remove all out-dated tracks we remove all old tracks and upload them again.
      $track->deleteAll($node->original);
      $track->updateAll($node);
      drupal_set_message(t('Updated all tracks attached to node at SoundCloud.com.'));
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function soundcloud_sync_node_insert($node) {
  if ($node->status == NODE_PUBLISHED) {
    $track = new SoundCloudTrack;
    $track->insertAll($node);
    drupal_set_message(t('Tracks was uploaded to SoundCloud.com.'));
  }
}

/**
 * Implements hook_node_delete().
 */
function soundcloud_sync_node_delete($node) {
  $track = new SoundCloudTrack;
  $track->deleteAll($node);
  drupal_set_message(t('Tracks was deleted from SoundCloud.com because node was removed.'));
}

/**
 * Generates list of file ID and assosiated Track ID for given Node ID.
 *
 * @param string $nid
 *  Node ID.
 *
 * @return array
 *   Returns array of fid=> track_id for given node or
 *   empty array of there are no files which stored at SoundCloud.com
 */
function soundcloud_sync_get_track_id($nid = '') {
  $output = array();

  $node = node_load($nid);
  if ($node) {
    $fids_list = soundcloud_sync_get_fids($node);
    foreach ($fids_list as $fid) {
      $output[$fid] =  soundcloud_sync_db_get_track_id($fid);
    }
  }

  return $output;
}

/**
 * soundcloud_sync_get_url
 *
 * @param int $fid
 * @access public
 * @return void
 */
function soundcloud_sync_get_url($fid = 0) {
  if (!$fid) return;
  $file = file_load($fid);
  $uri = $file->uri;
  return file_create_url($uri);
}

