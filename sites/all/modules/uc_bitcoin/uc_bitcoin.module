<?php
// $Id$

/**
 * @file
 * Bitcoin payment method.
 *
 * @author Mike Gogulski - http://www.nostate.com/ http://www.gogulski.com/
 * @author Erik LÃ¶nroth - erik.lonroth@gmail.com
 **/

/**
 * Set up the Bitcoin payment method settings form.
 */
function uc_bitcoin_settings_form() {
  $form = array();

  $form['server'] = array(
    '#type' => 'fieldset',
    '#title' => t('Server settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['server']['uc_bitcoin_server_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Server scheme'),
    '#default_value' => variable_get('uc_bitcoin_server_scheme', "http"),
    '#options' => array('http' => 'HTTP', 'https' => 'HTTPS'),
  );
  $form['server']['uc_bitcoin_server_certificate_path'] = array(
    '#type' => 'textfield',
    '#title' => t('SSL certificate path'),
    '#default_value' => variable_get('uc_bitcoin_server_certificate_path', ''),
    '#description' => t('Location of the server.cert file you generated for bitcoind, if you are using HTTPS, more information !link',
      array('!link'=> '<a href="https://en.bitcoin.it/wiki/Enabling_SSL_on_original_client_daemon">'.t('available here').'</a>')),
  );
  $form['server']['uc_bitcoin_server_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Server username'),
    '#default_value' => variable_get('uc_bitcoin_server_username', ''),
    '#description' => t("User name for your Bitcoin server's JSON-RPC-HTTP interface"),
    '#required' => TRUE,
  );
  $form['server']['uc_bitcoin_server_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Server password'),
    '#default_value' => variable_get('uc_bitcoin_server_password', ''),
    '#description' => t('Bitcoin server password'),
    '#required' => TRUE,
  );
  $form['server']['uc_bitcoin_server_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Server hostname'),
    '#default_value' => variable_get('uc_bitcoin_server_address', 'localhost'),
    '#description' => t('Bitcoin server domain name or IP address. Use "localhost" if bitcoind is running on the Ubercart server.'),
    '#required' => TRUE,
  );
  $form['server']['uc_bitcoin_server_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Server port'),
    '#default_value' => variable_get('uc_bitcoin_server_port', '8332'),
    '#description' => t('Bitcoin server port (generally 8332 or 443 if you have selected HTTPS above)'),
    '#required' => TRUE,
  );
  $form['transaction'] = array(
    '#type' => 'fieldset',
    '#title' => t('Transaction settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#required' => TRUE,
  );
  $form['transaction']['uc_bitcoin_transaction_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction timeout (hours)'),
    '#default_value' => variable_get('uc_bitcoin_transaction_timeout', '72'),
    '#description' => t('Transactions not paid for within this number of hours will be automatically cancelled. Decimals are permitted.'),
    '#required' => TRUE,
  );
  $form['transaction']['uc_bitcoin_transaction_confirms'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction confirmations'),
    '#default_value' => variable_get('uc_bitcoin_transaction_confirms', '1'),
    '#description' => t('Minimum number of Bitcoin transaction network confirmations required before a payment is considered accepted.'),
    '#required' => TRUE,
  );

  $form['#validate'][] = 'uc_bitcoin_settings_form_validate';

  return system_settings_form($form);
}

/**
 * Validate Bitcoin payment method settings.
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function uc_bitcoin_settings_form_validate($form, &$form_state) {

  $c = $form_state['values']['uc_bitcoin_server_scheme'];
  if ($c != 'http' && $c != 'https') {
    form_set_error('uc_bitcoin_server_scheme', t('Server scheme must be HTTP or HTTPS.'));
  }

  if ($c == 'https') {
    $c = $form_state['values']['uc_bitcoin_server_certificate_path'];
    if (!empty($c) && !is_readable($c)) {
      form_set_error('uc_bitcoin_server_certificate_path', t('SSL certificate file unreadable. Try using an absolute path or check file permissions.'));
    }
  }

  $c = $form_state['values']['uc_bitcoin_server_address'];
  if (!drupal_valid_http_host($c)) {
    form_set_error('uc_bitcoin_server_address', t('Must be hostname or IP address, SSL connections usually require hostname not IP address'));
  }

  $c = $form_state['values']['uc_bitcoin_server_port'];
  if (!is_numeric($c) || $c < 0 || $c > 65535 ) {
    form_set_error('uc_bitcoin_server_port', t('Server port must be an integer and between 0 and 65535.'));
  }

  $c = $form_state['values']['uc_bitcoin_transaction_timeout'];
  if (!is_numeric($c) || $c <= 0) {
    form_set_error('uc_bitcoin_transaction_timeout', t('Transaction timeout must be greater than zero.'));
  }

  $c = $form_state['values']['uc_bitcoin_transaction_confirms'];
  if (!is_numeric($c) || $c < 0 || floatval($c) != intval($c)) {
    form_set_error('uc_bitcoin_transaction_confirms', t('Required transaction confirmations must be an integer greater than or equal to zero.'));
  }

  if (!count(form_get_errors())) {
    // see if the connection works
    module_load_include('inc', 'uc_bitcoin', 'includes/bitcoin-php/bitcoin');
    $bitcoin_client = new BitcoinClient($form_state['values']['uc_bitcoin_server_scheme'],
      $form_state['values']['uc_bitcoin_server_username'],
      $form_state['values']['uc_bitcoin_server_password'],
      $form_state['values']['uc_bitcoin_server_address'],
      $form_state['values']['uc_bitcoin_server_port'],
      $form_state['values']['uc_bitcoin_server_certificate_path']);

    if (TRUE !== ($fault = $bitcoin_client->can_connect())) {
      form_set_error('', t("Unable to communicate with the Bitcoin server, check configuration or Bitcoin server status."));
    }
  }

}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_mail_alter().
 * @param array $&message
 *
 * Produces an altered email for 'uc_order_action-mail'
 * which includes the bitcoin address to send payments to
 * for the order.
 */
function uc_bitcoin_mail_alter(&$message) {
  // Set this to debug mails on local disk.
  if ($message['id'] == 'uc_order_action-mail') {
    $order = $message['params']['replacements']['uc_order'];
    $result = db_query("SELECT bitcoin_address FROM {uc_payment_bitcoin} " .
      "WHERE order_id = :order_id", array(':order_id' => $order->order_id))->fetchField();
    $message['body'][] = "--\nPayment is sent to address: " . t($result);
  }
}

/**
 * Implementation of hook_payment_method().
 */
function uc_bitcoin_uc_payment_method() {

  $title = theme('image', array(
    'path' => drupal_get_path('module', 'uc_bitcoin') . '/images/bitcoin.png',
    'attributes' => array('class' => array('uc-bitcoin')),
  )) . ' ' . t('Bitcoin - distributed internet currency');

  $methods[] = array(
    'id' => 'bitcoin',
    'name' => t('Bitcoin'),
    'title' => $title,
    'desc' => t('Pay with Bitcoin.'),
    'callback' => 'uc_payment_method_bitcoin',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE
  );
  return $methods;
}

/**
 * Implementation of hook_theme().
 */
function uc_bitcoin_theme($existing, $type, $theme, $path) {
  return array(
    'uc_payment_method_' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function uc_payment_method_bitcoin($op, &$order, $form = NULL, &$form_state = NULL) {

  switch ($op) {
    // Display the Bitcoin address in the payment order pane.
    case 'order-view':

      $payment_form = array();

      $payment_form['order_payment_bitcoin_address'] = array(
        '#markup' => t("Payment to address: " . $order->bitcoin_payment['bitcoin_address'])
      );

      return $payment_form;

    // Add Bitcoin settings to the payment methods settings form.
    case 'settings':
      return uc_bitcoin_settings_form();

    case 'cart-details':
      $payment_form = array();
      if($converted_btc = uc_bitcoin_payment_amount_to_btc($order)) {
        $payment_form['bitcoin-notice'] = array(
          '#markup' => '<p>' . t('This store supports Bitcoin payments, you can pay the current market exchange rate of your order from %currency to BTC, Once the order is confirmed you will receive the Bitcoin address to pay into.', array('%currency' => $order->currency)) . '</p>'
        );
        $payment_form['bitcoin-notice-amount'] = array(
          '#markup' => t('<strong>BTC Amount:</strong> %btc', array('%btc' => $converted_btc))
        );
      }
      return $payment_form;

    case 'order-submit':

      module_load_include('inc', 'uc_bitcoin', 'includes/bitcoin-php/bitcoin');
      $bitcoin_client = new BitcoinClient(variable_get("uc_bitcoin_server_scheme", ""),
                                          variable_get("uc_bitcoin_server_username", ""),
                                          variable_get("uc_bitcoin_server_password", ""),
                                          variable_get("uc_bitcoin_server_address", ""),
                                          variable_get("uc_bitcoin_server_port", ""),
                                          variable_get("uc_bitcoin_server_certificate_path", ""));

      if (TRUE !== ($fault = $bitcoin_client->can_connect())) {
        watchdog('uc_bitcoin_order', 'Unable to access Bitcoin server. Fault: !fault', $fault);
        return array(
          array(
            'pass' => FALSE,
            'message' => t('The Bitcoin server is presently unavailable. Please contact the site administrator.')
          )
        );
      }

      if (! $rate = uc_bitcoin_exchange_rate($order) ) {
        return array(
          array(
            'pass' => FALSE,
            'message' => t('Could not obtain a current exchange rate (MtGox unavailable, please try again)')
          )
        );
      }

      // stuff the order id, the total order price and a timestamp into the bitcoin address's label
      $label = $order->order_id . " " . number_format($order->order_total, 2, ".", "") . " " . time();
      try {
        $address = $bitcoin_client->query("getnewaddress", $label);
      } catch (BitcoinClientException $e) {
        watchdog('uc_bitcoin_order', 'getnewaddress failed. Fault: !fault', $e->getMessage());
        return array(
          array(
            'pass' => FALSE,
            'message' => t('The Bitcoin server is presently unavailable. Please contact the site administrator.')
          )
        );
      }
      if (!Bitcoin::checkAddress($address)) {
        return array(
          array(
            'pass' => FALSE,
            'message' => t('The Bitcoin server returned an invalid address. Please contact the site administrator.')
          )
        );
      }

      db_insert('uc_payment_bitcoin')->fields(array(
        'order_id' => $order->order_id,
        'bitcoin_address' => $address,
        'exchange_rate' => $rate
      ))->execute();

      $message = t('Please send your payment of BTC @total to Bitcoin address @address.', array(
        '@address' => $address,
        '@total' => uc_bitcoin_payment_amount_to_btc($order)
      ));
      return array(
        array(
          'pass' => TRUE,
          'message' => $message
        )
      );
      break;
    case 'customer-view':
      if ($order->payment_method == 'bitcoin' && !empty($order->bitcoin_payment)) {
        $btc_address = $order->bitcoin_payment['bitcoin_address'];
        $btc_amount = uc_bitcoin_payment_amount_to_btc($order);
        $payment_form['bitcoin-notice'] = array(
          '#markup' => t("BTC !amount to <br /> !address", array(
            '!amount' => $btc_amount,
            '!address' => $btc_address
          ))
        );
        return $payment_form;
      }
    break;
  }
}

/**
 * Convert an orders balance to BTC
 *
 * @param $order
 */
function uc_bitcoin_payment_amount_to_btc($order) {

  $rate = false;

  $precision = variable_get('uc_bitcoin_btc_precision', 4);
  $round_type = variable_get('uc_bitcoin_btc_rounding', PHP_ROUND_HALF_UP);

  if (!empty($order->bitcoin_payment)) {
    $rate = $order->bitcoin_payment['exchange_rate'];
  }
  else {
    $rate = uc_bitcoin_exchange_rate($order);
  }

  if($rate) {
    return round($order->order_total / $rate, $precision, $round_type);
  }

  return false;
}

/**
 * UberCart currency convert, do a lookup to MtGox and see what the rate is
 *
 * @param $order ubercart order
 * @return float amount
 */
function uc_bitcoin_exchange_rate($order) {

  static $rate;

  if(isset($rate)) {
    return $rate;
  }

  if ($order->currency == 'BTC') {
    // BTC 1:1
    return 1;
  }

  // Supported MtGox currencies, Dec 15 2012
  $mtGox_currencies = array(
    'USD',
    'EUR',
    'JPY',
    'CAD',
    'GBP',
    'CHF',
    'RUB',
    'AUD',
    'SEK',
    'DKK',
    'HKD',
    'PLN',
    'CNY',
    'SGD',
    'THB',
    'NZD',
    'NOK'
  );

  // @todo add cache
  if (in_array($order->currency, $mtGox_currencies)) {
    if ($response = drupal_http_request('https://data.mtgox.com/api/1/BTC' . $order->currency . '/ticker')) {
      if ($response->code == 200) {
        $data = json_decode($response->data);
        if(!empty($data->return->avg->value)) {
          $rate = $data->return->avg->value;
        }
      }
    }
  }

  if (!$rate || !is_numeric($rate)) {
    watchdog('uc_bitcoin', 'MtGox lookup - Unable to get current exchange rate', WATCHDOG_ERROR);
    $rate = FALSE; // just to be super sure.
  }

  return $rate;
}

function uc_bitcoin_entity_load($entities, $type) {
  if ($type == 'uc_order') {
    foreach ($entities as $entity) {
      $entity->bitcoin_payment = db_select('uc_payment_bitcoin', 'u')
        ->fields('u', array('bitcoin_address', 'exchange_rate'))
        ->condition('order_id', $entity->order_id)
        ->execute()
        ->fetchAssoc();
    }
  }
}

/**
 * Form implementation for hook_uc_cart_pane
 * Let the user know the currency will be converted to local BTC amount
 */
function uc_bitcoin_cart_form() {

  $form['btc_support'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pay in the equivalent Bitcoin amount'),
    '#weight' => 1,
  );

  $title = '<p>'.theme('image', array(
    'path' => drupal_get_path('module', 'uc_bitcoin') . '/images/bitcoin.png',
    'attributes' => array('class' => array('uc-bitcoin')),
  )) . ' ' . t('Bitcoin - distributed internet currency').'</p>';

  $form['btc_support']['amount'] = array(
    '#markup' => t('You can make your payment in BTC, Simply select "Bitcoin" as your payment method on the next screen'),
    '#weight' => 1,
  );
  $form['btc_support']['title'] = array(
    '#markup' => $title
  );

return $form;

}

function uc_bitcoin_uc_cart_pane($items) {

  $form = drupal_get_form('uc_bitcoin_cart_form');
  $panes['bitcoin_info'] = array(
    'title' => t('Bitcoin Support!'),
    'enabled' => TRUE,
    'weight' => 5,
    'body' =>  $form
  );


  return $panes;
}

/**
 * Implementation of hook_theme_registry_alter()
 */
function uc_bitcoin_theme_registry_alter(&$registry) {
  $registry['uc_order']['process functions'][]='uc_bitcoin_postprocess_invoice_themer';
}

/**
 * Without the poor user having to install a custom template, we modify the PaymentMethod theme variable
 * with the BTC amount by fiddling with the theme registry.
 *
 * @param $variables
 * @param $hook
 */
function uc_bitcoin_postprocess_invoice_themer(&$variables, $hook) {
  // Fix the order_payment_method with the BTC Address to pay into for future reference.
  if ($variables['order']->payment_method == 'bitcoin' && !empty($variables['order']->bitcoin_payment)) {
    $btc_address = $variables['order']->bitcoin_payment['bitcoin_address'];
    $btc_amount = uc_bitcoin_payment_amount_to_btc($variables['order']);

    $variables['order_payment_method'] = t("Bitcoin, BTC !amount to !address", array(
      '!amount' => $btc_amount,
      '!address' => $btc_address
    ));
  }

}

/*******************************************************************************
 * Bitcoin functions and utility functions
 ******************************************************************************/

/**
 * Check for and try to process pending Bitcoin transactions.
 */
function uc_bitcoin_cron() {

  // TODO: Figure out how to handle user-modified order statuses

  // prepare the JSON-RPC client
  module_load_include('inc', 'uc_bitcoin', 'includes/bitcoin-php/bitcoin');

  $bitcoin_client = new BitcoinClient(variable_get("uc_bitcoin_server_scheme", ""),
    variable_get("uc_bitcoin_server_username", ""),
    variable_get("uc_bitcoin_server_password", ""),
    variable_get("uc_bitcoin_server_address", ""),
    variable_get("uc_bitcoin_server_port", ""),
    variable_get("uc_bitcoin_server_certificate_path",
    ""));

  if (TRUE !== ($fault = $bitcoin_client->can_connect())) {
    return watchdog('uc_bitcoin_cron', 'Unable to access Bitcoin server. Fault: !fault', $fault);
  }

  $orders = db_select('uc_orders', 'u')
    ->fields('u', array('order_id'))
    ->condition('order_status', 'pending')
    ->condition('payment_method', 'bitcoin')
    ->execute();

  // loop through the open transactions
  while ($order_id = $orders->fetchAssoc()) {
    $order = uc_order_load($order_id['order_id']);

    if (empty($order->bitcoin_payment)) {
      continue;
    }

    try {
      $paid = $bitcoin_client->query("getreceivedbyaddress", $order->bitcoin_payment['bitcoin_address'], variable_get("uc_bitcoin_transaction_confirms", 1));
    } catch (BitcoinClientException $e) {
      return watchdog('uc_bitcoin', "Bitcoin server communication failed on getreceivedbyaddress !address with fault string !fault", array(
        "!address" => $order->bitcoin_payment['bitcoin_address'],
        '!fault' => $e->getMessage()
      ), WATCHDOG_ALERT);
    }

    $order_balance = uc_payment_balance($order);
    $order_total = uc_bitcoin_payment_amount_to_btc($order);

    // TODO: Handle overpayment
    // if the amount paid has changed, log a payment
    if ($order_total != $paid + $order_balance) {
      uc_payment_enter($order_id, "bitcoin", $paid - ($order_total - $order_balance), 0, NULL, '');
    }

    if ($paid >= $order_total) {
      // PAID IN FULL
      // TODO: If the product was a downloadable, mark the order as completed
      // TODO: next line not needed since we're using uc_payment_enter?
      //uc_order_update_status($order_id, "payment_received");
      uc_order_comment_save(
        $order_id,
        9999999,
        t('Paid - %btc BTC Received , Conversion rate of %rate for currency %currency',
          array(
            '%rate' => $order->bitcoin_payment['exchange_rate'],
            '%btc' => $paid,
            '%currency' => $order->currency
          )),
        'order',
        'payment_received',
        TRUE);

      continue;
    }
    // NOT PAID YET
    try {
      $label = $bitcoin_client->query("getlabel", $order->bitcoin_payment['bitcoin_address']);
    } catch (BitcoinClientException $e) {
      return watchdog('uc_bitcoin', "Bitcoin server failed on getlabel for !address with fault string !fault", array(
        "!address" => $order->bitcoin_payment['bitcoin_address'],
        '!fault' => $e->getMessage()
      ), WATCHDOG_ALERT);
    }
    list($junk, $junk1, $timestamp) = explode(" ", $label);
    if (time() > ($timestamp + intval(floatval(variable_get("uc_bitcoin_transaction_timeout", 72) * 60 * 60)))) {
      // ORDER EXPIRED
      // TODO: Handle refund of partial payment
      uc_order_update_status($order_id, "canceled");
      $cancelmsg = t("Your payment was not completed with at least !confirms within !timeout hours. Your order has been cancelled. If you have made a partial payment, please contact the shop administrator for a refund.", array(
        '!confirms' => format_plural(variable_get("uc_bitcoin_transaction_confirms", 1), "one confirmation", "@count confirmations"),
        '!timeout' => variable_get("uc_bitcoin_transaction_timeout", 72)
      ));
      uc_order_comment_save($order->order_id, 9999999, $cancelmsg, 'order', 'canceled', TRUE);
    }
  }
}
